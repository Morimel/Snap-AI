//
//  OnboardingViewModel.swift
//  SnapAI
//
//  Created by Isa Melsov on 23/9/25.
//

import SwiftUI

// MARK: - ViewModel (—Ñ–∞–∑–æ–≤–∞—è, –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è)
@MainActor
final class OnboardingViewModel: ObservableObject {
    @Published var data = OnboardingData()
    @Published var phase: OnboardingPhase = .goal
    @Published var personalPlan: PersonalPlan? // –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    @Published var progress: Double = 0.0
    
    private var isFinishing = false

    let repository: OnboardingRepository
    private let onFinished: () -> Void

    init(repository: OnboardingRepository, onFinished: @escaping () -> Void) {
        self.repository = repository
        self.onFinished = onFinished
    }

    /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç submit –≤ —Ñ–æ–Ω–µ.
    func saveDraft() {
        Task { try? await repository.submitOnboarding(data: data) }
    }

    /// –ï–¥–∏–Ω–∞—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å + –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–ª–∞–Ω
    func finish() async {
        guard !isFinishing else { return }
                isFinishing = true
                defer { isFinishing = false }
        
            phase = .submitting
            withAnimation(.easeInOut(duration: 0.2)) { progress = 0.05 }

            // –º–µ–ª–∫–∏–π ¬´—Ç–∏–∫–æ–≤—ã–π¬ª –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò
            var ticker: Task<Void, Never>?

            do {
                // 1) ¬´–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î¬ª
                try await repository.submitOnboarding(data: data)
                print("üì§ SUBMIT payload:", data.backendPayload()) // ‚Üê –ª–æ–≥ –Ω–∞ –≤—Å—è–∫–∏–π
                withAnimation(.easeInOut(duration: 0.25)) { progress = 0.35 }

                // 2) ¬´–ó–∞–ø—Ä–æ—Å –≤ ChatGPT¬ª (+ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞)
                // –ø–æ–∫–∞ –∂–¥—ë–º ‚Äî –ø–ª–∞–≤–Ω–æ –ø–æ–¥—Ä–∞—Å—Ç–∏ –¥–æ ~0.9, —á—Ç–æ–±—ã –æ—â—É—â–∞–ª–æ—Å—å ¬´–∂–∏–≤—ã–º¬ª
                ticker = Task { @MainActor in
                    while !Task.isCancelled && progress < 0.9 {
                        try? await Task.sleep(nanoseconds: 50_000_000) // 0.05s
                        progress = min(progress + 0.02, 0.9)
                    }
                }

                try await repository.requestAiPersonalPlan(from: data)
                ticker?.cancel()

                personalPlan = repository.fetchSavedPlan()
                withAnimation(.easeInOut(duration: 0.25)) { progress = 1.0 }

                phase = .ready
            } catch {
                ticker?.cancel()
                phase = .failed(error.localizedDescription)
            }
        }
    
    
    func saveManualPlan(calories: Int, proteins: Int, carbs: Int, fats: Int) async {
            do {
                try await AuthAPI.shared.patchPlan(
                    calories: calories, proteinG: proteins, fatG: fats, carbsG: carbs
                )

                // –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –±—ç–∫–∞
                let g = try await AuthAPI.shared.getCurrentPlan()

                // –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å (—á—Ç–æ–±—ã PlanScreen –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–ª—Å—è)
                if let old = self.personalPlan {
                    self.personalPlan = PersonalPlan(
                        weightUnit: old.weightUnit,
                        maintainWeight: old.maintainWeight,
                        dailyCalories: g.dailyCalories,
                        protein: g.proteinG,
                        fat: g.fatG,
                        carbs: g.carbsG,
                        meals: old.meals,
                        workouts: old.workouts
                    )
                } else {
                    self.personalPlan = PersonalPlan(
                        weightUnit: "kg",
                        maintainWeight: 0,
                        dailyCalories: g.dailyCalories,
                        protein: g.proteinG,
                        fat: g.fatG,
                        carbs: g.carbsG,
                        meals: [],
                        workouts: []
                    )
                }
            } catch {
                print("Save manual plan failed:", error.localizedDescription)
            }
        }
}

